# -*- coding: utf-8 -*-
"""Minor Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zxDBpVKw8oR_XwxcawYJJKCF73hcG7z-
"""

# Importing required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def load_data(weather_data):
    """Loads CSV data into a Pandas DataFrame."""
    return pd.read_csv(weather_data)

def descriptive_statistics(df):
    """Computes basic statistical metrics."""
    print("Descriptive Statistics:")
    print(df.describe())
    print("\nMode:")
    print(df.mode().iloc[0])

import os
file_path = "weatherHistory.csv"
print(os.path.exists(file_path))

def load_data(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File '{file_path}' not found!")
        return None
    return pd.read_csv(file_path)

import pandas as pd
import os

def load_excel_csv(file_path):
    """Loads a CSV file exported from MS Excel into a Pandas DataFrame."""

    if not os.path.exists(file_path):
        print(f"Error: File '{file_path}' not found!")
        return None

    try:
        # Try opening with UTF-8 encoding first
        df = pd.read_csv(file_path, encoding="utf-8")
    except UnicodeDecodeError:
        print("UTF-8 encoding failed. Trying ISO-8859-1...")
        df = pd.read_csv(file_path, encoding="ISO-8859-1")

    print("File loaded successfully!")
    return df

# Example usage
file_path = "weatherHistory.csv"  # Change this to the path of your CSV file
df = load_excel_csv(file_path)

df = pd.read_csv("/content/weatherHistory.csv")
print(df.to_string())

df.head(10)

df.tail(10)

df.iloc[30,1]

df.iloc[20,2]

df.isnull().sum()

df.fillna(120,inplace=True)
df.head()

df.dropna(axis = 1,inplace = True)
df.head()

df.isnull().sum()

df.drop_duplicates(inplace=True)
df.head()

from datetime import datetime

# Define the date string
date_str = "2006-04-01"

# Convert string to datetime object
date_obj = datetime.strptime(date_str, "%Y-%m-%d")

print("Datetime Object:", date_obj)
print("Year:", date_obj.year)
print("Month:", date_obj.month)
print("Day:", date_obj.day)

"""###Calculate Average Temperature by Month"""

import pandas as pd

def calculate_avg_temp_by_month(file_path):
    """Reads a CSV file and calculates the average temperature per month."""

    # Load the CSV file
    df = pd.read_csv(file_path)

    # Convert 'Formatted Date' to datetime format
    df["Formatted Date"] = pd.to_datetime(df["Formatted Date"], utc=True, errors="coerce")

    # Extract Month from Date
    df["Month"] = df["Formatted Date"].dt.month

    # Calculate Average Temperature per Month
    avg_temp_by_month = df.groupby("Month")["Temperature (C)"].mean()

    return avg_temp_by_month


file_path = "weatherHistory.csv"  # Update with the correct file path
avg_temp = calculate_avg_temp_by_month(file_path)


print("Average Temperature by Month:")
print(avg_temp)

import matplotlib.pyplot as plt
import numpy as np

#plot 1
x = np.array([0,1,2,3])
y = np.array([3,8,1,10])
plt.subplot(2,1,2)
plt.plot(x,y)

#plot 2
x = np.array([0,1,2,3])
y = np.array([10,20,30,40])
plt.subplot(2,1,1)
plt.plot(x,y)
plt.show()

"""###Plot Graphs

- Plot Average Temperature by Month:
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load CSV file
data = pd.read_csv("weatherHistory.csv")

# Rename 'Formatted Date' for convenience
data.rename(columns={"Formatted Date": "Date", "Temperature (C)": "Temperature"}, inplace=True)

# ‚úÖ Convert 'Date' to datetime format
data["Date"] = pd.to_datetime(data["Date"], errors="coerce", utc=True)

# ‚úÖ Extract Month
data["Month"] = data["Date"].dt.month

# ‚úÖ Calculate Average Temperature per Month
avg_temp = data.groupby("Month")["Temperature"].mean()

# üìä Plot Average Temperature by Month
plt.plot(avg_temp.index, avg_temp.values, marker="o", color="r", linestyle="-")

# Customize Graph
plt.title("Average Temperature by Month")
plt.xlabel("Month")
plt.ylabel("Temperature (¬∞C)")
plt.xticks(range(1, 13), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
plt.grid(True, linestyle="--", alpha=0.7)

# Show Plot
plt.show()

"""###Rainfall Trends

"""

import pandas as pd
import matplotlib.pyplot as plt

# Load CSV file
data = pd.read_csv("weatherHistory.csv")

# Rename 'Formatted Date' for convenience
data.rename(columns={"Formatted Date": "Date"}, inplace=True)

# ‚úÖ Convert 'Date' to datetime format with UTC
data["Date"] = pd.to_datetime(data["Date"], errors="coerce", utc=True)

# ‚úÖ Extract Month
data["Month"] = data["Date"].dt.month

# Filter only Rain days
rain_data = data[data["Precip Type"] == "rain"]

# Count rainy days per month
rainfall_trend = rain_data.groupby("Month").size()

# üìä Plot the Rainfall Trend Graph
plt.plot(rainfall_trend.index, rainfall_trend.values, marker="o", color="b", linestyle="-", label="Rainy Days")
plt.xlabel("Month")
plt.ylabel("Total Rainy Days")
plt.title("Rainfall Trends by Month")
plt.xticks(range(1, 13), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()
plt.show()

"""###Plot Rainfall

"""

import pandas as pd
import matplotlib.pyplot as plt

# Load CSV file
data = pd.read_csv("weatherHistory.csv")

# Rename 'Formatted Date' for convenience
data.rename(columns={"Formatted Date": "Date"}, inplace=True)

# ‚úÖ Convert 'Date' to datetime format
data["Date"] = pd.to_datetime(data["Date"], errors="coerce", utc=True)

# ‚úÖ Extract Month
data["Month"] = data["Date"].dt.month

# ‚úÖ Count Rainy Days per Month (if 'Precip Type' exists)
if "Precip Type" in data.columns:
    rainy_days = data[data["Precip Type"] == "rain"].groupby("Month").size()

    # üìä Plot Rainy Days by Month
    plt.bar(rainy_days.index, rainy_days.values, color="skyblue")

    # Customize Graph
    plt.title("Total Rainy Days by Month")
    plt.xlabel("Month")
    plt.ylabel("Number of Rainy Days")
    plt.xticks(range(1, 13), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
    plt.grid(axis="y", linestyle="--", alpha=0.7)

    # Show Plot
    plt.show()
else:
    print("Error: 'Precip Type' column not found in dataset.")

"""###Identify Extreme Weather Days"""

import pandas as pd

# Load dataset
data = pd.read_csv("weatherHistory.csv")

# Rename columns for easy access
data.rename(columns={"Formatted Date": "Date", "Temperature (C)": "Temperature"}, inplace=True)

# Convert 'Date' to datetime format
data["Date"] = pd.to_datetime(data["Date"], errors="coerce", utc=True)

# Find the hottest and coldest days
hottest_day = data[data["Temperature"] == data["Temperature"].max()]
coldest_day = data[data["Temperature"] == data["Temperature"].min()]

# Print results
print("üî• Hottest Day:\n", hottest_day[["Date", "Temperature", "Summary"]])
print("\n‚ùÑÔ∏è Coldest Day:\n", coldest_day[["Date", "Temperature", "Summary"]])

"""###Save Outputs to Files (Optional)"""

# @title Default title text
import pandas as pd
import matplotlib.pyplot as plt

# Load dataset
data = pd.read_csv("weatherHistory.csv")

# Rename columns for easy access
data.rename(columns={"Formatted Date": "Date", "Temperature (C)": "Temperature"}, inplace=True)

# Convert 'Date' to datetime format
data["Date"] = pd.to_datetime(data["Date"], errors="coerce", utc=True)

# Find hottest and coldest days
hottest_day = data[data["Temperature"] == data["Temperature"].max()]
coldest_day = data[data["Temperature"] == data["Temperature"].min()]

# Save cleaned dataset
data.to_csv("cleaned_weather_data.csv", index=False)

# Save hottest & coldest day to separate files
hottest_day.to_csv("hottest_day.csv", index=False)
coldest_day.to_csv("coldest_day.csv", index=False)

# üìä Plot Average Temperature by Month
data["Month"] = data["Date"].dt.month
avg_temp = data.groupby("Month")["Temperature"].mean()

plt.figure(figsize=(8, 5))
plt.plot(avg_temp.index, avg_temp.values, marker="o", color="r")
plt.title("Average Temperature by Month")
plt.xlabel("Month")
plt.ylabel("Temperature (¬∞C)")
plt.grid()
plt.savefig("avg_temperature_by_month.png")  # Save the plot as an image
plt.show()

print("‚úÖ Data and graphs saved successfully!")